@page "/"

@using MongoDB.Bson
@using MongoDB.Bson.Serialization
@using MongoDB.Driver
@using System.Text.Json
@using System.Text.Unicode
@using BudgetPlanner_Blazor.Models

@inject DataState dataState

<PageTitle>Index</PageTitle>
<div style="display:flex; flex-direction:column; max-width:400px">
    <h2>Connect to database</h2>

    Connect to the database and import a json file

    <label>@label</label>
    
    <EditForm Model="dataState" OnValidSubmit="SubmitDBStrings">
        <DataAnnotationsValidator />
        <div style="display:flex; flex-direction:column">
            <div style="display:flex; flex-direction:row">
                <span>Database Username</span>
                <InputText @bind-Value="dataState.DBUserName" />
                <ValidationMessage For="() => dataState.DBUserName" />
            </div>
            <div style="display:flex; flex-direction:row">
                <span>Database Password</span>
                <InputText @bind-Value="dataState.DBPassword" />
                <ValidationMessage For="() => dataState.DBPassword" />
            </div>
            <div style="display:flex; flex-direction:row">
                <span>Database Server Address</span>
                <InputText @bind-Value="dataState.DBServerAddress" />
                <ValidationMessage For="() => dataState.DBServerAddress" />
            </div>
            <button type="submit">Submit</button>
        </div>
    </EditForm>
    
</div>


@code {
    string label = "waiting";

    //On page load connect to DB and generate a merged global account
    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(dataState.DBUserName) && !string.IsNullOrEmpty(dataState.DBPassword) && !string.IsNullOrEmpty(dataState.DBServerAddress))
        {
            dataState.ConnectToDB();
        }
        if (dataState.AccountList.Count() > 1)
        {
            dataState.GenerateGlobalAccount();
        }
    }

    void SubmitDBStrings()
    {
        dataState.ConnectToDB();
        switch (dataState.ConnectionSuccess)
        {
            case true:
                label = "Success";
                dataState.GenerateGlobalAccount();
                break;
            case false:
                label = "Failure";
                break;
        }   
    }
}
