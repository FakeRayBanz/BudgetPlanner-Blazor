@page "/"

@using MongoDB.Bson
@using MongoDB.Bson.Serialization
@using MongoDB.Driver
@using System.Text.Json
@using System.Text.Unicode
@using BudgetPlanner_Blazor.Models

@inject DataState dataState

<PageTitle>Index</PageTitle>
<div style="display:flex; flex-direction:column;">
    <h1>Budget Planner</h1>

    Connect to the database and import a json file

    <label>@label</label>
    <InputFile OnChange="@LoadFile" />
    @foreach (var account in dataState.AccountList)
    {
        @if (account.Transactions.Count != 0)
        {
            <ApexChart TItem="Transaction" Title="Rolling Balance" Width="1200" Height="600" XAxisType="XAxisType.Datetime">
                <ApexPointSeries TItem="Transaction"
                         Items="account.Transactions"
                         SeriesType="@SeriesType.Line"
                         Name="Bank Balance"
                         XValue="@(e => e.FormattedDate)"
                         YValue="@(e => (decimal)e.BalanceNumeric)" />
            </ApexChart>
        }
    }
    <button @onclick="LoadDummyData">Load Dummy Data</button>
</div>


@code {
    string label = "waiting";

    //On page load connect to DB and generate a merged global account
    protected override async Task OnInitializedAsync()
    {
        dataState.ConnectToDB();
        if (dataState.AccountList.Count() > 1)
        {
            GenerateGlobalAccount();
        }
    }

    private async Task LoadFile(InputFileChangeEventArgs e)
    {

        IBrowserFile loadedFile = e.File;

        using (var memoryStream = new MemoryStream())
        {
            // Blazor InputFile doesnt support synchronous reads, requires async
            await loadedFile.OpenReadStream(20480000).CopyToAsync(memoryStream);
            memoryStream.Seek(0, SeekOrigin.Begin);
            Account? account = JsonSerializer.Deserialize<Account>(memoryStream);
            dataState.AccountList.Add(account);
            if (dataState.AccountList.Count() > 1)
            {
                //GenerateGlobalAccount();
            }

            //var bsonDocument = BsonExtensionMethods.ToBsonDocument(account);
            dataState.AccountsCollection.InsertOne(account);

            label = "json deserialized and uploaded";
        }
    }
    void GenerateGlobalAccount()
    {
        Account globalAccount = new Account();
        globalAccount.Transactions = JsonSerializer.Deserialize<List<Transaction>>(JsonSerializer.Serialize(dataState.AccountList[1].Transactions));
        //globalAccount.Transactions = dataState.AccountList[1].Transactions;
        foreach (var transaction in globalAccount.Transactions)
        {
            foreach (var secondTransaction in dataState.AccountList[0].Transactions)
            {
                if (transaction.FormattedDate == secondTransaction.FormattedDate)
                {
                    transaction.BalanceNumeric += secondTransaction.BalanceNumeric;
                    break;
                }
            }
        }
        dataState.AccountList.Add(globalAccount);
    }

    async Task LoadDummyData()
    {

        //dataState.AccountList = MongoDB.Bson.Serialization.BsonSerializer.Deserialize<Account>(dataState.TransactionsCollection);
        //var query = Query.EQ();
        var newAccount = new Account();
        newAccount.AccountGlobalId = "TestID";
        var newTransaction = new Transaction();
        newTransaction.TransactionId = "TestID";
        //newAccount.Transactions.Add(newTransaction);
        await dataState.AccountsCollection.InsertOneAsync(newAccount);

    }
}
